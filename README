:::::::Collaborators:
	Kelly Nigh
	Jacob Klein
	Coram Bryant

:::::::SubDomains:
	Daily
	English
	Friends
	SymSys
	SandBox

:::::::Fields Explained:
	users.user_type:
		0 = student
		1 = alum
		2 = admin

	users.approved:
		0 = alum pathway created by student/admin.  Not submitted or approved.
		-1  = alum pathway submitted for approval
		1  = alum pathway approved

:::::::Ruby/Rails versioning on bluehost
	Between April 5 and April 8 (2010), Bluehost updated Ruby and Rails for stanfordpathways.com, to the following:
		Ruby: 1.8.7-p174
		Rails to 2.3.5

	This upgrade broke all of our rails deployments.  Presumably, due to the Ruby 1.8.7 changes:
		A new library directory named `vendor_ruby' is introduced in addition to `site_ruby'. The idea is to 
		separate libraries installed by the package system (`vendor') from manually (`site') installed 
		libraries preventing the former from getting overwritten by the latter, while preserving the user 
		option to override vendor libraries with site libraries. (`site_ruby' takes precedence over `vendor_ruby')

	Bluehost says:
		We are aware that these changes may cause issues for your Rails applications and other Ruby related scripts.
		We encourage you to contact support should you notice any problems as a result of this upgrade.
		You can contact support at (888) 401-HOST, http://helpdesk.bluehost.com or chat with a live agent via the 
		Live Chat link at http://bluehost.com.  Additional information is also available at 
		http://www.ruby-lang.org and http://www.rubyonrails.org.

	Instead, I ran the following for each rails app (after creating a "vendor" subdirectory):
		rake rails:freeze:edge RELEASE=2.3.5
		
		This did the following (e.g. for SandBox):
			(in /home1/stanfos3/rails/SandBox)
			cd vendor
			Downloading Rails from http://dev.rubyonrails.org/archives/rails_2.3.5.zip
			Unpacking Rails
			rm -rf rails
			rm -f rails.zip
			rm -f rails/Rakefile
			rm -f rails/cleanlogs.sh
			rm -f rails/pushgems.rb
			rm -f rails/release.rb
			touch rails/REVISION_219c81b9e1cdd81a3a8c4cda5718f17454e1a5ba
			cd -
			Updating current scripts, javascripts, and configuration settings
		
		This essentially pulled down 2.3.5 support, but also froze the version at 2.3.5.
		There may be a more preferable solution . . .
	
:::::::Search Support:

	The following must be performed manually on any table that supports search:

		ALTER TABLE users ENGINE = MYISAM;
		ALTER TABLE degrees ENGINE = MYISAM;
		ALTER TABLE jobs ENGINE = MYISAM;

	Indices are created as follows:

		CREATE fulltext INDEX x_f_search ON users
			(name,summary,alum_interview_text,student_interview_text,six_words);
		CREATE fulltext INDEX x_f_search ON degrees
			(major, degree);
		CREATE fulltext INDEX x_f_search ON jobs
			(company, title, responsibilities);
	
	Searches are performed as follows (I'm not sure if the match fields have to all match the fields in the CREATE statement)

		SELECT * FROM users 
			WHERE match(name,summary,alum_interview_text,student_interview_text,six_words)
				against ("Jacob" WITH query expansion)

	Note: "WITH query expansion" is probably sub-optimal (leads to unexpected results and requires two passes)

:::::::update_all.sh:

#!/bin/bash
# update_all.sh
# Updates all subdomains and main site

cd SandBox
rm config/database.yml
git pull
cd config
cp database.yml.sandbox database.yml

cd ../..
cd Friends
rm config/database.yml
git pull
cd config
cp database.yml.friends database.yml

cd ../..
cd Daily
rm config/database.yml
git pull
cd config
cp database.yml.daily database.yml

# Special Sauce for English
cd ../..
cd English
rm config/database.yml
rm public/stylesheets/pathways.css
rm public/images/body.gif
rm -r public/images/buttons
rm app/views/layouts/standard.html.erb
git pull
cd config
cp database.yml.english database.yml
cd ..
cd public/stylesheets
cp pathways.css.english pathways.css
cd ../images
cp. body.gif.english body.gif
cp -r buttons.english buttons
cd ../../app/views/layouts
cp standard.html.erb.english standard.html.erb
cd ../..

# copy this block for each subdomain, updating appropriately
cd ../..
cd SymSys
rm config/database.yml
git pull
cd config
cp database.yml.symsys database.yml

# do this last (it can be done from any subdomain)
cd ../public
cp main.html ~/public_html/index.html
rm -r ~/public_html/stylesheets
cp -r stylesheets ~/public_html
rm -r ~/public_html/images
cp -r images ~/public_html

:::::::backup.sh
#!/bin/bash
# Shell script to backup MySql database and profile pics

MyUSER="stanfos3_admin" # USERNAME
MyPASS="ssw294"         # PASSWORD
 
# Linux bin paths
MYSQL="$(which mysql)"
MYSQLDUMP="$(which mysqldump)"
GZIP="$(which gzip)"
 
# Backup Dest director
DEST="_backup"

# Get date in dd-mm-yyyy format
NOW="$(date +"%m-%d-%Y_%s")"

# Create Backup sub-directories
MBD="$DEST/$NOW/mysql"
install -d $MBD
PBD="$DEST/$NOW/pics"
install -d $PBD

# DB skip list
SKIP="information_schema
stanfos3_sandboxdv"

# Get all databases
DBS="$($MYSQL -u $MyUSER -p$MyPASS -Bse 'show databases')"

# Archive database dumps
for db in $DBS
do
    skipdb=-1
    if [ "$SKIP" != "" ];
    then
	for i in $SKIP
	do
	    [ "$db" == "$i" ] && skipdb=1 || :
	done
    fi
 
    if [ "$skipdb" == "-1" ] ; then
    	FILE="$MBD/$db"
	$MYSQLDUMP -u $MyUSER -p$MyPASS $db > $FILE
    fi
done

# Archive profile pictures
DOMAINS="Daily
English
Friends
SymSys"

for domain in $DOMAINS
do
	mkdir $PBD/$domain
	cp $domain/public/images/pics/* $PBD/$domain
done

# Archive the directory and cleanup
cd $DEST
tar -cf $NOW.tar $NOW
$GZIP -9 $NOW.tar
rm -rf $NOW


:::::::Installing git on bluehost (from a blog that has since come down):

Background

It seems that Bluehost by default does not support nor tell you how to install Git. I also tried posting a query on Bluehost’s forums to see if anybody has done it before but with no luck.  So I decided to just go ahead and try this out myself.  Also note that you will need to enable the SSH access on your bluehost account to do this. You can easily enable SSH on your account by sending a request to Bluehost Tech support.

Here are my specs from the bluehost account:

myuser@koolwal.net [~]# cat /proc/version

Output:
Linux version 2.6.28-9.16.intel.BHsmp (kernel@bluehost.com) (gcc version 3.4.6 20060404 (Red Hat 3.4.6-10)) #1 SMP Sat Apr 18 11:41:59 MDT 2009
myuser@koolwal.net [~]#

Basically it is a Red Hat Linux system with 2.6.28 Linux kernel running. So now we have all the information that we need let’s get started…

Step 1: Download git tarball

Log into your Bluehost account and give the following command:

# wget http://kernel.org/pub/software/scm/git/git-1.6.3.3.tar.bz2

Note: The latest stable release version might have changed since this posting, so you need to substitute in the above command the latest git version that you would like to install or else you can continue with the git version that I ended up installing. You can checkout the latest stable release version of git here.

Step 2: Extract the tarball

Now just extract the tarball installation file in your home directory

# tar -xjvf git-1.6.3.3.tar.bz2

Step 3: Compile the git program

# cd git-1.6.3.3
# make

Now mostly after a while you will get the following error message and your make command will fail:

make[2]: true: Command not found
make[2]: *** [blibdirs] Error 127
make[1]: *** [all] Error 2
make: *** [all] Error 2

It seems that the true command is not installed on the bluehost servers but you type in the command true it seems that it exits:

myuser@koolwal.net [~]# true
myuser@koolwal.net [~]#

This probably means that the git make command is not able to locate the directory in which the true command sits.

Step 4: Fix “true”: Command not found error

The simplest way to fix this error is to create an empty script file called true with just the following line:

#!/bin/sh

Save and exit the file and copy it in your local bin directory after making it executable:

# cd;
# chmod 755 true
# mkdir bin (if the directory does not exits)
# cp true bin/true

and now you can re-issue the make command:

# cd git-1.6.3.3
# make clean
# make

and now after a while you should see the the “make” command finishes without any error.

Step 5: Install the git program

Finally you can install the git software by issuing the following command:

# make install

and you should be able to execute the “git” command on your Bluehost account.

Step 6: Test git

Now it is time to test if the “git” program installed successfully or not.

# mkdir test_project
# cd test_project
# git

Output:

Initialized empty Git repository in /home1/myuser/test_project/.git/

Congratulations the above output means that your “git” is working just fine and now you can use it for your project that you have been planning.
